{"version":3,"sources":["components/Note.js","services/notes.js","App.js","serviceWorker.js","index.js"],"names":["Note","note","toggleImportance","deleteNote","label","important","className","key","id","content","replace","onClick","class","baseUrl","axios","get","then","response","data","newObject","post","put","setNotes","window","confirm","delete","App","useState","notes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","newNotes","map","push","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","returnedNotes","concat","type","value","onChange","target","find","n","changedNote","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f7782a89.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Note = ({ note, toggleImportance, deleteNote }) => {\n    const label = note.important ? 'Not Important' : 'Important';\n\n    return(\n        <li className='note' key={note.id}>\n            {note.content}\n            <button \n            className={`note__importance-btn__${label.replace(\" \", \"_\")}`} onClick={toggleImportance}>\n                <span>{label}</span>\n            </button>\n            <button className=\"note__delete-btn\" onClick={deleteNote}>\n                <i class=\"fa fa-ban\"></i>\n            </button>\n        </li>\n    );\n}","import axios from \"axios\";\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nconst deleteNote = (id, setNotes) => {\n  if (window.confirm(`Are you sure you want to delete this note?`)) {\n    axios\n      .delete(`${baseUrl}/${id}`)\n      .then(() => {\n        return axios.get(baseUrl);\n      })\n      .then((response) => {\n        setNotes(response.data);\n      });\n  } else {\n\n  }\n};\n\nexport default { getAll, create, update, deleteNote };\n","import React, { useState, useEffect } from \"react\";\nimport { Note } from \"./components/Note\";\nimport noteService from \"./services/notes\";\nimport \"./App.css\";\n\nexport const App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n\n  const label = showAll ? \"Collapse Unimportant\" : \"Expand All\";\n\n  const hook = () => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  };\n  useEffect(hook, []);\n\n  const postHook = (event) => {\n    event.preventDefault();\n    if (newNote !== \"\") {\n      const noteObject = {\n        content: newNote,\n        date: new Date().toISOString(),\n        important: Math.random() > 0.5,\n\t  };\n\n      noteService.create(noteObject).then((returnedNotes) => {\n\t\tsetNotes(notes.concat(returnedNotes));\n\t\t\n        setNewNote(\"\");\n      });\n    }\n  };\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const toggleImportance = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService.update(id, changedNote).then((returnedNotes) => {\n      setNotes(notes.map((note) => (note.id !== id ? note : returnedNotes)));\n    });\n  };\n\n  const handleShowAllClick = () => {\n    if (showAll) {\n      const newNotes = [];\n      notes.map((note) => {\n        if (note.important) {\n          newNotes.push(note);\n        }\n      });\n      setNotes(newNotes);\n    } else {\n      noteService.getAll().then((initialNotes) => {\n        setNotes(initialNotes);\n      });\n    }\n    setShowAll(!showAll);\n  };\n\n  return (\n    <div className=\"container__content\">\n      <button className=\"btn__collapse-btn\" onClick={handleShowAllClick}>\n        {label}\n      </button>\n      <form className=\"newNote__form\" onSubmit={postHook}>\n        <input className=\"newNote__input\" type=\"text\" value={newNote} onChange={handleNoteChange}></input>\n        <button className=\"btn__add-btn\" type=\"submit\">\n          <i class=\"fa fa-plus-circle\"></i>\n        </button>\n      </form>\n      <ul>\n        {notes.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportance(note.id)}\n            deleteNote={() => {\n              noteService.deleteNote(note.id, setNotes);\n            }}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}